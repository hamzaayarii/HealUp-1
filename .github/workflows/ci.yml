name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Setup and build frontend assets first
  frontend-build:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: public/build/
          retention-days: 5

      - name: Build success
        run: echo "‚úÖ Frontend assets built successfully!"

  # Laravel setup and database tests
  laravel-setup:
    name: Laravel Setup & Database Tests
    runs-on: ubuntu-latest
    needs: [frontend-build]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: public/build/

      - name: Copy .env
        run: |
          cp .env.example .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Run Database Migrations
        run: php artisan migrate --force

      - name: Seed Database
        run: php artisan db:seed --force
        continue-on-error: true

      - name: Database Tests
        run: vendor/bin/phpunit --testsuite=Feature --filter=Database
        continue-on-error: true

  # Unit tests (fast, no database)
  laravel-unit-tests:
    name: Laravel Unit Tests
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: public/build/

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Run Unit Tests
        run: vendor/bin/phpunit --testsuite=Unit --coverage-clover=coverage-unit.xml

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: coverage-unit.xml
          retention-days: 5

  # Feature tests (with database)
  laravel-feature-tests:
    name: Laravel Feature Tests
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: public/build/

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run Feature Tests
        run: vendor/bin/phpunit --testsuite=Feature --coverage-clover=coverage-feature.xml

      - name: Upload feature test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-feature
          path: coverage-feature.xml
          retention-days: 5

  # Integration tests (API endpoints, full stack)
  laravel-integration-tests:
    name: Laravel Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: public/build/

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Run All Tests with Coverage
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage-html

      - name: Upload full coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            coverage-html/
          retention-days: 5

      - name: Display coverage summary
        run: |
          echo "‚úÖ Tests completed successfully!"
          if [ -f coverage.xml ]; then
            echo "üìä Coverage report generated"
          fi

  # Static analysis
  laravel-static-analysis:
    name: Laravel Static Analysis
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPStan
        run: |
          composer require --dev phpstan/phpstan --no-interaction || true
          if [ -f vendor/bin/phpstan ]; then
            vendor/bin/phpstan analyse --memory-limit=2G || echo "‚ö†Ô∏è PHPStan found issues (non-blocking)"
          fi
        continue-on-error: true

      - name: Run Laravel Pint
        run: |
          composer require --dev laravel/pint --no-interaction || true
          if [ -f vendor/bin/pint ]; then
            vendor/bin/pint --test || echo "‚ö†Ô∏è Code style issues found (non-blocking)"
          fi
        continue-on-error: true

  # Security checks
  laravel-security:
    name: Laravel Security Audit
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Security Audit
        run: composer audit --no-interaction || echo "‚ö†Ô∏è Security vulnerabilities found"
        continue-on-error: true

      - name: Check for .env in repo
        run: |
          if [ -f .env ]; then
            echo "‚ö†Ô∏è WARNING: .env file found in repository!"
            exit 1
          else
            echo "‚úÖ No .env file in repository"
          fi

  python-tests:
    name: Python AI Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          cd python_ai
          pip install -r requirements.txt

      - name: Run Python tests
        run: |
          cd python_ai
          if [ -f test.py ]; then python test.py; else echo "No python tests found"; fi

  code-quality:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [laravel-unit-tests, laravel-feature-tests, laravel-integration-tests, laravel-static-analysis, laravel-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: Display Coverage Summary
        run: |
          echo "================================================"
          echo "üìä Code Coverage & Quality Report"
          echo "================================================"
          echo ""
          if [ -f coverage.xml ]; then
            echo "‚úÖ Full coverage report generated"
          fi
          if [ -f coverage-unit.xml ]; then
            echo "‚úÖ Unit test coverage generated"
          fi
          if [ -f coverage-feature.xml ]; then
            echo "‚úÖ Feature test coverage generated"
          fi
          echo ""
          echo "================================================"
          echo "Test Suite Summary:"
          echo "  ‚úÖ Unit Tests: Passed"
          echo "  ‚úÖ Feature Tests: Passed"
          echo "  ‚úÖ Integration Tests: Passed"
          echo "  ‚úÖ Static Analysis: Completed"
          echo "  ‚úÖ Security Audit: Completed"
          echo "================================================"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [laravel-integration-tests, python-tests, code-quality]
    if: |
      github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: public/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/healUp:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/healUp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker Image Summary
        run: |
          echo "üê≥ Docker Image pushed successfully to Docker Hub!"
          echo "üì¶ Repository: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/healUp"
          echo "üì¶ Tags: latest, ${{ github.sha }}"
          echo ""
          echo "üîó Pull commands:"
          echo "   docker pull docker.io/${{ secrets.DOCKERHUB_USERNAME }}/healUp:latest"
          echo "   docker pull docker.io/${{ secrets.DOCKERHUB_USERNAME }}/healUp:${{ github.sha }}"

  deploy:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && success()
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            cd /path/to/your/project
            git pull origin main
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
            npm ci
            npm run build
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan storage:link
            php artisan optimize
            # Restart services
            sudo systemctl restart php8.2-fpm
            sudo systemctl restart nginx

  notify:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [laravel-unit-tests, laravel-feature-tests, laravel-integration-tests, laravel-static-analysis, laravel-security, python-tests, code-quality, docker, deploy]
    if: always()
    steps:
      - name: Pipeline Status
        run: |
          echo "================================================"
          echo "üéâ CI/CD Pipeline Execution Complete!"
          echo "================================================"
          echo "Laravel Tests:"
          echo "  ‚úÖ Unit Tests: ${{ needs.laravel-unit-tests.result }}"
          echo "  ‚úÖ Feature Tests: ${{ needs.laravel-feature-tests.result }}"
          echo "  ‚úÖ Integration Tests: ${{ needs.laravel-integration-tests.result }}"
          echo "  ‚úÖ Static Analysis: ${{ needs.laravel-static-analysis.result }}"
          echo "  ‚úÖ Security Audit: ${{ needs.laravel-security.result }}"
          echo ""
          echo "Other Jobs:"
          echo "  ‚úÖ Python Tests: ${{ needs.python-tests.result }}"
          echo "  ‚úÖ Code Quality: ${{ needs.code-quality.result }}"
          echo "  üê≥ Docker Build: ${{ needs.docker.result }}"
          echo "  üöÄ Deployment: ${{ needs.deploy.result }}"
          echo "================================================"

          if [[ "${{ needs.laravel-unit-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.laravel-feature-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.laravel-integration-tests.result }}" == "failure" ]]; then
            echo "‚ùå Some tests failed!"
            exit 1
          else
            echo "‚úÖ All critical tests passed!"
          fi
